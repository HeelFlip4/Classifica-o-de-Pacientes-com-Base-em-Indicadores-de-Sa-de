### Explicação do Enunciado: Classificação de Pacientes com Base em Indicadores de Saúde  

O objetivo do trabalho é desenvolver um sistema em C++ que classifique pacientes entre **saudáveis** e **doentes**, com base em dados clínicos fornecidos. Esse sistema deve usar um **modelo de classificação baseado na distância euclidiana**, comparando um novo paciente com um histórico de 10 pacientes anteriores.

---

### **1. Estrutura da Tabela de Pacientes**  
O sistema trabalhará com uma **matriz de números do tipo `float`**, onde:  

- **Cada linha representa um paciente.**  
- **Cada coluna representa um indicador clínico**, como pressão arterial, glicose no sangue e frequência cardíaca.  
- A **última coluna** sempre contém o valor de classificação do paciente:  
  - `1.0` → Paciente saudável  
  - `-1.0` → Paciente doente  

Exemplo de tabela com 3 pacientes e 4 indicadores clínicos:  

| Indicador 1 | Indicador 2 | Indicador 3 | Indicador 4 | Classificação |
|-------------|-------------|-------------|-------------|--------------|
| 0.5         | 0.3         | 0.2         | 0.5         | 1.0          |
| 2.0         | 0.8         | 3.0         | 5.2         | -1.0         |
| 1.8         | 2.1         | 0.7         | 0.9         | 1.0          |

Além dos 10 pacientes históricos, a **última linha da matriz será reservada para um novo paciente**, que ainda não tem uma classificação definida.  

Exemplo com um novo paciente ainda não classificado:  

| Indicador 1 | Indicador 2 | Indicador 3 | Indicador 4 | Classificação |
|-------------|-------------|-------------|-------------|--------------|
| 0.5         | 0.3         | 0.2         | 0.5         | 1.0          |
| 2.0         | 0.8         | 3.0         | 5.2         | -1.0         |
| 1.8         | 2.1         | 0.7         | 0.9         | 1.0          |
| 2.1         | 0.7         | 3.1         | 5.1         | ???          |

O sistema precisa calcular a **distância euclidiana** entre esse novo paciente e os pacientes anteriores para determinar sua classificação.

---

### **2. Como o Sistema Deve Funcionar**  

1. **Entrada de Dados:**  
   - O programa deve solicitar o número de **indicadores clínicos** (colunas), que deve ser entre **3 e 7**.  
   - Se o usuário inserir um número fora desse intervalo, o programa deve solicitar novamente.  
   - O número total de pacientes na tabela **deve ser 11** (10 históricos + 1 novo paciente).  

2. **Cálculo da Distância Euclidiana:**  
   A fórmula para calcular a distância entre dois pacientes **P e Q** é:  

   \[
   d(P, Q) = \sqrt{\sum_{i=1}^{N} (P_i - Q_i)^2}
   \]

   Onde:  
   - `P_i` são os indicadores clínicos do novo paciente.  
   - `Q_i` são os indicadores clínicos de um paciente histórico.  
   - `N` é o número de indicadores clínicos.  

   O paciente histórico que tiver a **menor distância euclidiana** em relação ao novo paciente será considerado o mais semelhante.  

3. **Classificação do Novo Paciente:**  
   - Se o paciente mais próximo for saudável (`1.0`), o novo paciente provavelmente também será **saudável**.  
   - Se o paciente mais próximo for doente (`-1.0`), o novo paciente provavelmente também será **doente**.  

4. **Exibição da Tabela Final:**  
   Após a classificação, o programa deve exibir a matriz completa, com todos os pacientes e seus indicadores, incluindo a **classificação final do novo paciente**.

---

### **3. Restrições do Trabalho**
- **A matriz deve ser alocada estaticamente** (não pode ser alocada dinamicamente).  
- **É obrigatório modularizar o código**, ou seja, dividir em funções separadas para cada parte do programa.  
- **É proibido o uso de containers** (`vector`, `queue`, `stack`, `list`, `map` etc.).  
- **Só é permitido o uso da biblioteca padrão do C++** (sem bibliotecas externas).  
- **O código deve ser bem documentado e organizado**.

---

### **4. Exemplo de Execução**
#### **Entrada:**
```
Digite o número de indicadores clínicos (entre 3 e 7): 4
Digite os dados dos 10 pacientes históricos:
...
Digite os dados do novo paciente:
...
```

#### **Saída esperada:**
```
Tabela de Pacientes:
------------------------------------------------
| Indicador 1 | Indicador 2 | Indicador 3 | Indicador 4 | Classificação |
------------------------------------------------
| 0.5         | 0.3         | 0.2         | 0.5         | 1.0           |
| 2.0         | 0.8         | 3.0         | 5.2         | -1.0          |
| 1.8         | 2.1         | 0.7         | 0.9         | 1.0           |
| 2.1         | 0.7         | 3.1         | 5.1         | 1.0 (Saudável) |
------------------------------------------------
```
O novo paciente foi classificado como **saudável (1.0)** porque o paciente mais próximo no histórico era saudável.

---

### **Conclusão**
O trabalho consiste em implementar um **sistema de triagem médica simples** baseado na **distância euclidiana** entre pacientes, garantindo que todos os requisitos sejam seguidos com rigor. O foco está na correta manipulação da matriz, no cálculo matemático e na modularização do código em C++.
